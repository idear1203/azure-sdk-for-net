// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WorkspaceManagedSqlServerKeysOperations.
    /// </summary>
    public static partial class WorkspaceManagedSqlServerKeysOperationsExtensions
    {
            /// <summary>
            /// Create or updates server's server key.
            /// </summary>
            /// <remarks>
            /// Create or updates workspace managed sql server's server key.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='serverKeyName'>
            /// The name of the server key to be operated on (updated or created). The key
            /// name is required to be in the format of 'vault_key_version'. For example,
            /// if the keyId is
            /// https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901,
            /// then the server key name should be formatted as:
            /// YourVaultName_YourKeyName_01234567890123456789012345678901
            /// </param>
            /// <param name='parameters'>
            /// The requested server key resource state.
            /// </param>
            public static ServerKey CreateOrUpdate(this IWorkspaceManagedSqlServerKeysOperations operations, string resourceGroupName, string workspaceName, string serverKeyName, ServerKey parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, workspaceName, serverKeyName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or updates server's server key.
            /// </summary>
            /// <remarks>
            /// Create or updates workspace managed sql server's server key.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='serverKeyName'>
            /// The name of the server key to be operated on (updated or created). The key
            /// name is required to be in the format of 'vault_key_version'. For example,
            /// if the keyId is
            /// https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901,
            /// then the server key name should be formatted as:
            /// YourVaultName_YourKeyName_01234567890123456789012345678901
            /// </param>
            /// <param name='parameters'>
            /// The requested server key resource state.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerKey> CreateOrUpdateAsync(this IWorkspaceManagedSqlServerKeysOperations operations, string resourceGroupName, string workspaceName, string serverKeyName, ServerKey parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, serverKeyName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes workspace server's server key with the given name.
            /// </summary>
            /// <remarks>
            /// Deletes workspace managed sql server's server key with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='serverKeyName'>
            /// The name of the server key to be operated on (updated or created). The key
            /// name is required to be in the format of 'vault_key_version'. For example,
            /// if the keyId is
            /// https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901,
            /// then the server key name should be formatted as:
            /// YourVaultName_YourKeyName_01234567890123456789012345678901
            /// </param>
            public static void Delete(this IWorkspaceManagedSqlServerKeysOperations operations, string resourceGroupName, string workspaceName, string serverKeyName)
            {
                operations.DeleteAsync(resourceGroupName, workspaceName, serverKeyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes workspace server's server key with the given name.
            /// </summary>
            /// <remarks>
            /// Deletes workspace managed sql server's server key with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='serverKeyName'>
            /// The name of the server key to be operated on (updated or created). The key
            /// name is required to be in the format of 'vault_key_version'. For example,
            /// if the keyId is
            /// https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901,
            /// then the server key name should be formatted as:
            /// YourVaultName_YourKeyName_01234567890123456789012345678901
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IWorkspaceManagedSqlServerKeysOperations operations, string resourceGroupName, string workspaceName, string serverKeyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, serverKeyName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or updates server's server key.
            /// </summary>
            /// <remarks>
            /// Create or updates workspace managed sql server's server key.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='serverKeyName'>
            /// The name of the server key to be operated on (updated or created). The key
            /// name is required to be in the format of 'vault_key_version'. For example,
            /// if the keyId is
            /// https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901,
            /// then the server key name should be formatted as:
            /// YourVaultName_YourKeyName_01234567890123456789012345678901
            /// </param>
            /// <param name='parameters'>
            /// The requested server key resource state.
            /// </param>
            public static ServerKey BeginCreateOrUpdate(this IWorkspaceManagedSqlServerKeysOperations operations, string resourceGroupName, string workspaceName, string serverKeyName, ServerKey parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, workspaceName, serverKeyName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or updates server's server key.
            /// </summary>
            /// <remarks>
            /// Create or updates workspace managed sql server's server key.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='serverKeyName'>
            /// The name of the server key to be operated on (updated or created). The key
            /// name is required to be in the format of 'vault_key_version'. For example,
            /// if the keyId is
            /// https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901,
            /// then the server key name should be formatted as:
            /// YourVaultName_YourKeyName_01234567890123456789012345678901
            /// </param>
            /// <param name='parameters'>
            /// The requested server key resource state.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerKey> BeginCreateOrUpdateAsync(this IWorkspaceManagedSqlServerKeysOperations operations, string resourceGroupName, string workspaceName, string serverKeyName, ServerKey parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, serverKeyName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes workspace server's server key with the given name.
            /// </summary>
            /// <remarks>
            /// Deletes workspace managed sql server's server key with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='serverKeyName'>
            /// The name of the server key to be operated on (updated or created). The key
            /// name is required to be in the format of 'vault_key_version'. For example,
            /// if the keyId is
            /// https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901,
            /// then the server key name should be formatted as:
            /// YourVaultName_YourKeyName_01234567890123456789012345678901
            /// </param>
            public static void BeginDelete(this IWorkspaceManagedSqlServerKeysOperations operations, string resourceGroupName, string workspaceName, string serverKeyName)
            {
                operations.BeginDeleteAsync(resourceGroupName, workspaceName, serverKeyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes workspace server's server key with the given name.
            /// </summary>
            /// <remarks>
            /// Deletes workspace managed sql server's server key with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='serverKeyName'>
            /// The name of the server key to be operated on (updated or created). The key
            /// name is required to be in the format of 'vault_key_version'. For example,
            /// if the keyId is
            /// https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901,
            /// then the server key name should be formatted as:
            /// YourVaultName_YourKeyName_01234567890123456789012345678901
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IWorkspaceManagedSqlServerKeysOperations operations, string resourceGroupName, string workspaceName, string serverKeyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, serverKeyName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
